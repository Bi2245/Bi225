<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>森 ᕱᕱ (v3.5) - 经典微调方案</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        :root {
            --phone-width: 360px;
            --phone-height: 780px;
            --primary-text: #000;
            --secondary-text: #8e8e93;
            --qq-blue: #12B7F5;
            --battery-green: #34c759;
            --battery-red: #ff3b30;
        }

        /* --- 基础框架 --- */
        body { display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #333; font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Helvetica Neue", Arial, sans-serif; margin: 0; overflow: hidden; }
        .phone-container { width: var(--phone-width); height: var(--phone-height); background: #1c1c1e; border-radius: 44px; box-shadow: 0 20px 60px rgba(0,0,0,0.4); display: flex; flex-direction: column; overflow: hidden; position: relative; border: 10px solid #111; }
        .screen { width: 100%; height: 100%; display: flex; flex-direction: column; position: relative; background-color: #000; }

        /* --- 锁屏 & 主屏幕 --- */
        .lock-screen { position: absolute; inset: 0; background-image: url('https://tc.z.wiki/autoupload/f/_dUEGnKEJQzmc-cKlsXN5NiO_OyvX7mIgxFBfDMDErs/20251021/Ksp2/1173X1080/Image_1760944246183.jpg'); background-size: cover; background-position: center; z-index: 2000; display: flex; flex-direction: column; color: white; text-shadow: 0 2px 5px rgba(0,0,0,0.5); }
        .lock-screen.unlocked { opacity: 0; pointer-events: none; transition: opacity 0.5s; }
        .lock-time { font-size: 72px; font-weight: 200; margin: 100px auto 0; }
        .lock-date { font-size: 20px; font-weight: 400; margin: 0 auto; }
        .lock-prompt { position: absolute; bottom: 30px; left: 50%; transform: translateX(-50%); font-size: 16px; font-weight: 500; animation: pulse 2s infinite; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
        .home-screen { position: absolute; inset: 0; background-image: url('https://tc.z.wiki/autoupload/f/_dUEGnKEJQzmc-cKlsXN5NiO_OyvX7mIgxFBfDMDErs/20251021/AvYd/1600X3462/Image_1760944255964.jpg'); background-size: cover; background-position: center; display: flex; flex-direction: column; }
        .home-screen-content { flex: 1; display: flex; flex-direction: column; align-items: center; padding-top: 70px; }
        .home-time { font-size: 56px; font-weight: 600; color: white; text-shadow: 0 2px 5px rgba(0,0,0,0.5); margin-bottom: 25px; }
        .app-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 18px; width: 100%; padding: 0 18px; }
        .app-icon-wrapper { display: flex; flex-direction: column; align-items: center; cursor: pointer; }
        .app-icon-image { width: 58px; height: 58px; border-radius: 13px; overflow: hidden; margin-bottom: 6px; }
        .app-icon-image img { width: 100%; height: 100%; object-fit: cover; }
        .app-icon-name { font-size: 12px; color: white; text-shadow: 0 1px 2px rgba(0,0,0,0.5); }

        /* --- 状态栏 & 灵动岛 --- */
        .status-bar { height: 44px; display: flex; justify-content: space-between; align-items: center; padding: 0 4px; color: white; font-size: 15px; position: absolute; top: 0; left: 0; right: 0; z-index: 1100; text-shadow: 0 1px 2px rgba(0,0,0,0.5); pointer-events: none; }
        .status-bar-left, .status-bar-right { display: flex; align-items: center; padding: 0 12px; height: 100%; pointer-events: auto; cursor: pointer; }
        .status-bar-left { gap: 6px; } .status-bar-right { gap: 6px; }
        .time { font-weight: 600; }
        .signal-bars { display: flex; align-items: flex-end; height: 12px; gap: 1.5px; }
        .signal-bar { width: 3px; background-color: white; border-radius: 1px; }
        .signal-bar:nth-child(1) { height: 25%; } .signal-bar:nth-child(2) { height: 50%; } .signal-bar:nth-child(3) { height: 75%; } .signal-bar:nth-child(4) { height: 100%; }
        .network-type { font-size: 12px; font-weight: 500; margin-left: 4px; }
        .battery-icon { width: 24px; height: 11.5px; border: 1.5px solid white; border-radius: 3.5px; position: relative; padding: 1px; box-sizing: border-box; }
        .battery-icon::after { content: ''; position: absolute; right: -3px; top: 50%; transform: translateY(-50%); width: 1.5px; height: 4px; background-color: white; border-radius: 0 1px 1px 0; }
        .battery-level { position: absolute; top: 1px; left: 1px; bottom: 1px; background-color: white; border-radius: 2px; transition: width 0.5s ease, background-color 0.5s ease; }
        .battery-text { position: absolute; inset: 0; display: flex; justify-content: center; align-items: center; font-size: 10px; font-weight: 700; color: black; z-index: 2; mix-blend-mode: difference; }
        .charging .battery-level { background-color: var(--battery-green); } .low-battery .battery-level { background-color: var(--battery-red); }
        .dynamic-island { position: absolute; top: 12px; left: 50%; transform: translateX(-50%); width: 125px; height: 36px; background-color: black; border-radius: 20px; display: flex; justify-content: center; align-items: center; color: white; font-size: 14px; cursor: pointer; transition: all 0.5s cubic-bezier(0.32, 0.94, 0.6, 1); z-index: 1099; }
        .dynamic-island > div { position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; opacity: 0; transition: opacity 0.3s; }
        .dynamic-island .island-default-content { opacity: 1; }
        .dynamic-island.expanded-music, .dynamic-island.notification { width: 95%; height: 85px; border-radius: 40px; }
        .dynamic-island.expanded-music .island-music-player, .dynamic-island.notification .island-notification-content { opacity: 1; }
        .dynamic-island.expanded-music .island-default-content, .dynamic-island.notification .island-default-content { opacity: 0; }
        .island-music-player { justify-content: space-between; padding: 12px 20px; box-sizing: border-box; }
        .music-cover { width: 60px; height: 60px; border-radius: 8px; background-color: #333; margin-right: 10px; }
        .music-details { flex: 1; color: white; } .music-title { font-size: 16px; font-weight: 600; } .music-artist { font-size: 12px; color: #aaa; }
        .music-controls-island { font-size: 20px; display: flex; gap: 15px; }
        .island-notification-content { gap: 10px; } .island-notification-content .app-icon { width: 40px; height: 40px; border-radius: 10px; } .island-notification-content .text { color: white; font-size: 16px; }

        /* --- 应用通用 --- */
        .app-container, .app-page { position: absolute; inset: 0; background-color: #f0f2f5; display: none; flex-direction: column; z-index: 1000; transform: translateX(100%); transition: transform 0.3s ease-in-out; }
        .app-container.active, .app-page.active { display: flex; transform: translateX(0); }
        
        /* --- [核心修改] --- */
        .app-navigation-bar {
            position: absolute;
            top: 44px; /* [修改] 上移4px */
            left: 0;
            right: 0;
            height: 40px; /* [修改] 减小高度4px */
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 10px 0 5px;
            flex-shrink: 0;
            z-index: 10;
        }
        .app-back-btn {
            font-size: 20px; /* [修改] 减小尺寸 */
            cursor: pointer;
            color: var(--qq-blue);
            padding: 5px;
        }
        .app-title {
            font-size: 17px;
            font-weight: 600;
        }
        .app-refresh-btn {
            font-size: 17px; /* [修改] 减小尺寸 */
            cursor: pointer;
            color: var(--qq-blue);
        }
        .app-content {
            flex: 1;
            overflow-y: auto;
            background-color: #f0f2f5;
            padding-top: 84px; /* [修改] 44px(top) + 40px(height) = 84px */
        }
        /* --- [核心修改结束] --- */

        .bottom-nav { display: flex; border-top: 1px solid #ddd; background-color: #f7f7f7; }
        .nav-item { flex: 1; text-align: center; padding: 8px; cursor: pointer; color: #8e8e93; }
        .nav-item.active { color: var(--qq-blue); }
        .nav-item i { font-size: 20px; display: block; margin-bottom: 4px; }
        .app-page-content { display: none; padding: 15px; }
        .app-page-content.active { display: block; }
        .home-indicator { position: absolute; bottom: 8px; left: 50%; transform: translateX(-50%); width: 135px; height: 5px; background-color: rgba(0,0,0,0.4); border-radius: 3px; cursor: pointer; z-index: 1101; }
        .notification-center-overlay { position: absolute; inset: 0; background-color: rgba(0,0,0,0.3); backdrop-filter: blur(20px); z-index: 1500; display: none; }
        .notification-center-overlay.active { display: block; }
        .notification-list { padding: 60px 15px; display: flex; flex-direction: column; gap: 10px; }
        .notification-item { background-color: rgba(255,255,255,0.8); border-radius: 15px; padding: 12px; display: flex; flex-direction: column; gap: 5px; }
        .notification-header { display: flex; align-items: center; gap: 8px; }
        .notification-app-icon { width: 20px; height: 20px; border-radius: 5px; }
        .notification-app-name { font-size: 14px; font-weight: 600; }
        .notification-content { font-size: 15px; }
        .menu-list, .form-container { display: flex; flex-direction: column; gap: 10px; padding: 15px; }
        .menu-item, .form-group { background-color: white; border-radius: 10px; }
        .menu-item { padding: 15px; display: flex; justify-content: space-between; align-items: center; cursor: pointer; font-size: 16px; }
        .menu-item:hover { background-color: #e5e5e5; }
        .menu-item::after { content: '>'; color: #ccc; }
        .menu-icon { font-size: 20px; margin-right: 12px; width: 24px; text-align: center; }
        .form-group { padding: 15px; }
        .form-group label { display: block; margin-bottom: 8px; font-size: 14px; color: #555; }
        .form-group input, .form-group textarea, .form-group select { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; box-sizing: border-box; font-family: inherit; }
        .form-group textarea { min-height: 120px; resize: vertical; }
        .form-actions { display: flex; gap: 10px; margin-top: 15px; }
        .form-btn { flex: 1; padding: 12px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; }
        .form-btn-primary { background-color: var(--qq-blue); color: white; }
        .form-btn-secondary { background-color: #e0e0e0; color: #000; }
        .file-input { display: none; }
        .status-message { margin-top: 15px; padding: 10px; border-radius: 8px; text-align: center; }
        .status-message.success { background-color: #d4edda; color: #155724; }
        .status-message.error { background-color: #f8d7da; color: #721c24; }

        /* --- 外卖APP特定样式 --- */
        .food-list { padding: 15px; display: grid; grid-template-columns: 1fr; gap: 15px; }
        .food-item { display: flex; background: white; border-radius: 10px; overflow: hidden; }
        .food-item img { width: 100px; height: 100px; object-fit: cover; }
        .food-item .info { flex: 1; padding: 10px; display: flex; flex-direction: column; }
        .food-item .name { font-weight: 600; }
        .food-item .price { color: var(--battery-red); font-size: 18px; margin-top: auto; }
        .food-item .add-btn { align-self: flex-end; background: var(--qq-blue); color: white; border: none; border-radius: 50%; width: 30px; height: 30px; font-size: 20px; cursor: pointer; }
        .order-list { padding: 15px; display: flex; flex-direction: column; gap: 15px; }
        .order-item { background: white; border-radius: 10px; padding: 15px; }
        .order-item .header { display: flex; justify-content: space-between; font-weight: 600; margin-bottom: 10px; }
        .order-item .body { border-top: 1px solid #eee; border-bottom: 1px solid #eee; padding: 10px 0; margin: 10px 0; }
        .order-item .footer { text-align: right; }
        .order-item .actions { margin-top: 10px; display: flex; justify-content: flex-end; gap: 10px; }
        .modal { position: fixed; inset: 0; background: rgba(0,0,0,0.5); display: none; justify-content: center; align-items: center; z-index: 3000; }
        .modal-content { background: white; padding: 20px; border-radius: 15px; width: 80%; }
        .rating-stars { display: flex; justify-content: center; font-size: 30px; cursor: pointer; margin-bottom: 15px; }
        .rating-stars .star { color: #ccc; }
        .rating-stars .star.active { color: #ffc107; }

        /* --- 豆瓣APP特定样式 --- */
        .douban-nav { display: flex; justify-content: space-around; background-color: white; border-bottom: 1px solid #ddd; }
        .douban-nav-item { padding: 15px; cursor: pointer; }
        .douban-nav-item.active { border-bottom: 2px solid black; }
        .post-card { background-color: white; padding: 15px; border-radius: 10px; margin-bottom: 10px; }
        .post-title { font-weight: bold; margin-bottom: 5px; }
        .post-preview { color: #555; }
    </style>
</head>
<body>
    <div class="phone-container">
        <div class="screen">
            <div class="lock-screen" id="lockScreen"><div class="lock-time"></div><div class="lock-date"></div><div class="lock-prompt">向上轻扫以打开</div></div>
            <div class="home-screen"><div class="home-screen-content"><div class="home-time"></div><div class="app-grid"></div></div></div>
            <div class="status-bar"><div class="status-bar-left" onclick="showNotificationCenter()"><div class="time"></div></div><div class="status-bar-right"><div class="signal-bars"><div class="signal-bar"></div><div class="signal-bar"></div><div class="signal-bar"></div><div class="signal-bar"></div></div><div class="network-type">5G</div><div class="battery-container"><div class="battery-icon"><div class="battery-level"></div><div class="battery-text"></div></div></div></div></div>
            <div class="dynamic-island" onclick="triggerMusicIsland()"><div class="island-default-content">森</div><div class="island-music-player"><img class="music-cover" src="https://i.scdn.co/image/ab67616d0000b273a1024455299a32517267f9a3" alt="cover"><div class="music-details"><div class="music-title"></div><div class="music-artist"></div></div><div class="music-controls-island" onclick="event.stopPropagation(); triggerMusicIsland();"><i class="fas fa-pause"></i></div></div><div class="island-notification-content"><img class="app-icon" id="island-noti-icon" src=""><div class="text" id="island-noti-text"></div></div></div>
            <div class="notification-center-overlay" id="notificationCenterOverlay" onclick="hideNotificationCenter()"><div class="notification-list" id="notificationList"></div></div>
            <div class="home-indicator" onclick="returnToHome()"></div>
            
            <!-- 应用容器 -->
            <div class="app-container" id="chatContainer"></div>
            <div class="app-container" id="doubanContainer"></div>
            <div class="app-container" id="deliveryContainer"></div>
            <div class="app-container" id="shoppingContainer"></div>
            <div class="app-container" id="settingsContainer"></div>
            <div class="app-container" id="beautifyContainer"></div>
            <div class="app-container" id="memoContainer"></div>
            <div class="app-container" id="booksContainer"></div>

            <!-- 子页面容器 -->
            <div class="app-page" id="apiSettingsPage"></div>
            <div class="app-page" id="dataManagementPage"></div>
            
            <!-- 外卖APP模态框 -->
            <div class="modal" id="ratingModal"><div class="modal-content"><h3>评价订单</h3><div class="rating-stars" id="ratingStars"><span class="star" data-value="1">★</span><span class="star" data-value="2">★</span><span class="star" data-value="3">★</span><span class="star" data-value="4">★</span><span class="star" data-value="5">★</span></div><textarea id="ratingComment" placeholder="写下你的评价..." rows="4" style="width:100%;"></textarea><div class="form-actions"><button class="form-btn form-btn-secondary" onclick="closeModal('ratingModal')">取消</button><button class="form-btn form-btn-primary" onclick="submitRating()">提交</button></div></div></div>
        </div>
    </div>
    
    <script>
        // --- 全局状态与数据管理 ---
        let systemData;
        const defaultSystemData = {
            unlocked: false,
            settings: { dnd: false, apiProvider: 'openai', apiKey: '', apiUrl: '', selectedModel: null },
            music: { isPlaying: false, song: 'Starboy', artist: 'The Weeknd' },
            notifications: [],
            worldbooks: { library: [], currentId: null },
            douban: { profile: { name: '凛凛眠', id: 'user12345', signature: '...', avatar: 'https://img.heliar.top/file/1761640211370_retouch_2025102816153556.png' }, posts: [] },
            delivery: { profile: { name: '凛凛眠', avatar: 'https://img.heliar.top/file/1761640211370_retouch_2025102816153556.png', address: '' }, cart: [], orders: [{id:1, status:'delivering', items:[{name:'香辣鸡腿堡', price:18, quantity:1}], total:18, rider:'张师傅', distance:'1.2km'}, {id:2, status:'delivered', items:[{name:'麻辣香锅', price:45, quantity:1}], total:45, rider:'李师傅', distance:'已送达'}] }
        };

        function saveSystemData() { try { localStorage.setItem('moriPhoneSystemData_v3.5', JSON.stringify(systemData)); } catch (e) { console.error("无法保存数据:", e); } }
        function loadSystemData() { try { const saved = localStorage.getItem('moriPhoneSystemData_v3.5'); systemData = saved ? JSON.parse(saved) : JSON.parse(JSON.stringify(defaultSystemData)); } catch (e) { systemData = JSON.parse(JSON.stringify(defaultSystemData)); } }

        // --- UI & 系统核心 ---
        function updateTime() { const now = new Date(); const timeString = now.toLocaleTimeString('zh-CN', { hour: 'numeric', minute: '2-digit', hour12: false }); document.querySelectorAll('.time, .lock-time, .home-time').forEach(el => el.textContent = timeString); document.querySelector('.lock-date').textContent = now.toLocaleDateString('zh-CN', { month: 'long', day: 'numeric', weekday: 'long' }); }
        async function updateBattery() { try { const b = await navigator.getBattery(); const l = Math.floor(b.level * 100); document.querySelector('.battery-level').style.width = `${l}%`; document.querySelector('.battery-text').textContent = l; document.querySelector('.battery-icon').classList.toggle('charging', b.charging); document.querySelector('.battery-icon').classList.toggle('low-battery', !b.charging && l <= 20); } catch (e) { console.warn("无法访问电池API。"); } }
        function showNotificationCenter() { renderNotifications(); document.getElementById('notificationCenterOverlay').classList.add('active'); }
        function hideNotificationCenter() { document.getElementById('notificationCenterOverlay').classList.remove('active'); }

        // --- 应用导航 ---
        function openApp(appId) { document.getElementById(appId + 'Container').classList.add('active'); }
        function closeApp(appId) { document.getElementById(appId + 'Container').classList.remove('active'); }
        function openAppPage(pageId) { document.getElementById(pageId).classList.add('active'); }
        function closeAppPage(pageId) { document.getElementById(pageId).classList.remove('active'); }
        function returnToHome() { document.querySelectorAll('.app-container.active, .app-page.active').forEach(el => el.classList.remove('active')); }

        // --- 灵动岛与通知 ---
        function triggerMusicIsland() { systemData.music.isPlaying = !systemData.music.isPlaying; const island = document.querySelector('.dynamic-island'); island.classList.toggle('expanded-music', systemData.music.isPlaying); island.querySelector('.music-controls-island i').className = `fas fa-${systemData.music.isPlaying ? 'pause' : 'play'}`; saveSystemData(); }
        function triggerNotification(app, text) { const newNoti = { id: Date.now(), app: app.name, text: text, icon: app.icon }; systemData.notifications.unshift(newNoti); const island = document.querySelector('.dynamic-island'); document.getElementById('island-noti-icon').src = newNoti.icon; document.getElementById('island-noti-text').textContent = `${newNoti.app}: ${newNoti.text}`; island.classList.add('notification'); setTimeout(() => island.classList.remove('notification'), 4000); saveSystemData(); }
        function renderNotifications() { const listEl = document.getElementById('notificationList'); listEl.innerHTML = systemData.notifications.length === 0 ? '<div class="notification-item" style="text-align:center;">无新通知</div>' : systemData.notifications.map(n => `<div class="notification-item"><div class="notification-header"><img src="${n.icon}" class="notification-app-icon"><span class="notification-app-name">${n.app}</span></div><div class="notification-content">${n.text}</div></div>`).join(''); }

        // --- API 功能 ---
        async function callAI(prompt) { if (!systemData.settings.selectedModel || !systemData.settings.apiKey || !systemData.settings.apiUrl) { throw new Error("API未配置或未选择模型"); } let apiUrl = systemData.settings.apiUrl; if (apiUrl.endsWith('/')) apiUrl = apiUrl.slice(0, -1); if (systemData.settings.apiProvider === 'openai' && !apiUrl.endsWith('/v1')) apiUrl += '/v1'; const response = await fetch(`${apiUrl}/chat/completions`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${systemData.settings.apiKey}` }, body: JSON.stringify({ model: systemData.settings.selectedModel.id, messages: [{ role: 'user', content: prompt }], max_tokens: 150 }) }); if (!response.ok) { const err = await response.text(); throw new Error(`AI调用失败: ${err}`); } const data = await response.json(); return data.choices[0].message.content; }
        function updateCurrentModelDisplay() { const d = document.getElementById('currentModelDisplay'); if (systemData.settings.selectedModel) { document.getElementById('currentModelName').textContent = systemData.settings.selectedModel.id; d.style.display = 'block'; } else { d.style.display = 'none'; } }
        async function testApiConnection() { await fetchModels(); }
        function saveApiSettings() { systemData.settings.apiProvider = document.getElementById('apiProvider').value; systemData.settings.apiUrl = document.getElementById('apiUrl').value.trim(); systemData.settings.apiKey = document.getElementById('apiKey').value.trim(); saveSystemData(); document.getElementById('apiStatus').textContent = 'API设置已保存！'; document.getElementById('apiStatus').className = 'status-message success'; }
        function exportAllData() { const d = JSON.stringify(systemData, null, 2), u = 'data:application/json;charset=utf-8,' + encodeURIComponent(d), a = document.createElement('a'); a.href = u; a.download = `森手机备份_${new Date().toISOString().slice(0, 10)}.json`; a.click(); }
        function importData(i) { const f = i.files[0]; if (!f) return; const r = new FileReader(); r.onload = e => { try { const d = JSON.parse(e.target.result); if (!d.settings) throw new Error('格式不正确'); if (confirm('确定导入数据？将覆盖当前设置。')) { systemData = d; saveSystemData(); location.reload(); } } catch (err) { alert(`导入失败: ${err.message}`); } }; r.readAsText(f); }
        async function fetchModels() { const p = document.getElementById('apiProvider').value; let u = document.getElementById('apiUrl').value.trim(); const k = document.getElementById('apiKey').value.trim(); const s = document.getElementById('apiStatus'), l = document.getElementById('apiModelsList'); l.style.display = 'none'; l.innerHTML = ''; if (!u || !k) { s.textContent = '错误：请填写完整的API URL和密钥。'; s.className = 'status-message error'; return; } s.textContent = '正在获取模型列表...'; s.className = 'status-message'; if (u.endsWith('/')) u = u.slice(0, -1); if (p === 'openai' && !u.endsWith('/v1')) u += '/v1'; let r = `${u}/models`, h = { 'Content-Type': 'application/json' }; if (p === 'openai' || p === 'custom') h['Authorization'] = `Bearer ${k}`; else if (p === 'anthropic') { h['x-api-key'] = k; h['anthropic-version'] = '2023-06-01'; } else if (p === 'google') { r = `${u}/v1beta/models?key=${k}`; h = {}; } try { const res = await fetch(r, { headers: h }); if (!res.ok) { const err = await res.text(); throw new Error(`(${res.status}) ${err}`); } const d = await res.json(); let m = d.data || d.models || []; if (m.length > 0) { l.innerHTML = '<h3>可用模型列表 (点击选择)</h3>'; m.forEach(md => { const id = md.id || md.name; const el = document.createElement('div'); el.className = 'menu-item'; el.textContent = id; if (systemData.settings.selectedModel && id === systemData.settings.selectedModel.id) el.classList.add('selected'); el.onclick = () => { document.querySelectorAll('#apiModelsList .menu-item.selected').forEach(i => i.classList.remove('selected')); el.classList.add('selected'); systemData.settings.selectedModel = { id }; updateCurrentModelDisplay(); }; l.appendChild(el); }); l.style.display = 'block'; s.textContent = `成功获取 ${m.length} 个模型。`; s.className = 'status-message success'; } else { s.textContent = '警告：API响应成功，但未返回模型列表。'; s.className = 'status-message error'; } } catch (e) { s.textContent = `获取失败: ${e.message}`; s.className = 'status-message error'; console.error(e); } }

        // --- 各APP渲染函数 ---
        function renderApp(appId, title, content, hasRefresh = false, refreshFunc = null) { const container = document.getElementById(appId + 'Container'); container.innerHTML = `<div class="app-navigation-bar"><div class="app-back-btn" onclick="closeApp('${appId}')"><i class="fas fa-chevron-left"></i></div><div class="app-title">${title}</div>${hasRefresh ? `<div class="app-refresh-btn" onclick="${refreshFunc}()">✨</div>` : '<div></div>'}</div><div class="app-content">${content}</div>`; }
        function renderAppWithPages(appId, title, navContent, pageContents, hasRefresh = false, refreshFunc = null) { const container = document.getElementById(appId + 'Container'); let pagesHtml = ''; for (const pageId in pageContents) { pagesHtml += `<div class="app-page-content" id="${appId}-${pageId}-page">${pageContents[pageId]}</div>`; } container.innerHTML = `<div class="app-navigation-bar"><div class="app-back-btn" onclick="closeApp('${appId}')"><i class="fas fa-chevron-left"></i></div><div class="app-title">${title}</div>${hasRefresh ? `<div class="app-refresh-btn" onclick="${refreshFunc}()">✨</div>` : '<div></div>'}</div><div class="app-content" style="padding:0; display:flex; flex-direction:column;"><div style="flex:1; overflow-y:auto; padding-top:44px;">${pagesHtml}</div><div class="bottom-nav">${navContent}</div></div>`; container.querySelector('.app-page-content').classList.add('active'); container.querySelector('.nav-item').classList.add('active'); }
        function switchAppPage(appId, pageId) { const container = document.getElementById(appId + 'Container'); container.querySelectorAll('.app-page-content, .nav-item').forEach(el => el.classList.remove('active')); document.getElementById(`${appId}-${pageId}-page`).classList.add('active'); container.querySelector(`.nav-item[onclick*="'${pageId}'"]`).classList.add('active'); }

        function renderSettingsApp() { renderApp('settings', '设置', `<div class="menu-list"><div class="menu-item" onclick="openAppPage('apiSettingsPage')"><span><i class="menu-icon fas fa-robot"></i>API与模型设置</span></div><div class="menu-item" onclick="openAppPage('dataManagementPage')"><span><i class="menu-icon fas fa-database"></i>数据管理</span></div></div>`); document.getElementById('apiSettingsPage').innerHTML = `<div class="app-navigation-bar"><div class="app-back-btn" onclick="closeAppPage('apiSettingsPage')"><i class="fas fa-chevron-left"></i></div><div class="app-title">API设置</div></div><div class="app-content" style="padding-top:44px;"><div class="form-container"><div class="current-model" id="currentModelDisplay" style="display: none;"><h4>当前选定模型</h4><p id="currentModelName">无</p></div><div class="form-group"><label for="apiProvider">API接口模型供应商</label><select id="apiProvider"><option value="openai">OpenAI</option><option value="anthropic">Anthropic</option><option value="google">Google Gemini</option><option value="custom">自定义</option></select></div><div class="form-group"><label for="apiUrl">填写URL链接</label><input type="url" id="apiUrl" placeholder="https://api.openai.com"></div><div class="form-group"><label for="apiKey">输入API密钥</label><input type="password" id="apiKey" placeholder="输入您的API密钥"></div><div class="form-actions"><button class="form-btn form-btn-primary" onclick="fetchModels()">获取模型</button><button class="form-btn form-btn-secondary" onclick="testApiConnection()">测试模型</button></div><div id="apiStatus" class="status-message"></div><div id="apiModelsList" class="menu-list" style="display: none;"></div><div class="form-actions"><button class="form-btn form-btn-primary" onclick="saveApiSettings()">保存设置</button></div></div></div>`; document.getElementById('dataManagementPage').innerHTML = `<div class="app-navigation-bar"><div class="app-back-btn" onclick="closeAppPage('dataManagementPage')"><i class="fas fa-chevron-left"></i></div><div class="app-title">数据管理</div></div><div class="app-content" style="padding-top:44px;"><div class="form-container"><h2>数据备份与恢复</h2><div class="form-actions" style="flex-direction:column;"><button class="form-btn form-btn-primary" onclick="exportAllData()">导出全部数据</button><button class="form-btn form-btn-secondary" onclick="document.getElementById('importFile').click()">导入数据</button><input type="file" id="importFile" class="file-input" accept=".json" onchange="importData(this)"></div></div></div>`; }
        function renderBooksApp() { const c = document.getElementById('booksContainer'); c.innerHTML = `<div class="app-navigation-bar"><div class="app-back-btn" onclick="closeApp('books')"><i class="fas fa-chevron-left"></i></div><div class="app-title" id="booksTitle">世界书</div></div><div class="app-content" id="booksContent"></div>`; const b = systemData.worldbooks.library.find(wb => wb.id === systemData.worldbooks.currentId); b ? renderWorldbookEditor(b) : renderWorldbookLibrary(); }
        function renderWorldbookLibrary() { document.getElementById('booksTitle').textContent = '世界书'; const c = document.getElementById('booksContent'); c.innerHTML = `<div class="menu-list"><div class="menu-item" onclick="renderWorldbookCreator()"><span><i class="menu-icon fas fa-plus"></i>创建新世界书</span></div><h3>书库</h3>${systemData.worldbooks.library.length === 0 ? '<p style="text-align:center; color:#888;">书库为空</p>' : systemData.worldbooks.library.map(wb => `<div class="menu-item" onclick="openWorldbook('${wb.id}')"><span>${wb.name}</span></div>`).join('')}</div>`; }
        function openWorldbook(id) { systemData.worldbooks.currentId = id; saveSystemData(); renderBooksApp(); }
        function renderWorldbookCreator() { document.getElementById('booksTitle').textContent = '创建新书'; document.getElementById('booksContent').innerHTML = `<div class="form-container"><div class="form-group"><label for="wb-create-name">书名</label><input type="text" id="wb-create-name"></div><div class="form-group"><label for="wb-create-desc">描述</label><textarea id="wb-create-desc"></textarea></div><div class="form-actions"><button class="form-btn form-btn-secondary" onclick="renderWorldbookLibrary()">取消</button><button class="form-btn form-btn-primary" onclick="createNewWorldbook()">创建</button></div></div>`; }
        function createNewWorldbook() { const n = document.getElementById('wb-create-name').value, d = document.getElementById('wb-create-desc').value; if (!n) { alert('书名不能为空！'); return; } const b = { id: Date.now().toString(), name: n, description: d, entries: {} }; systemData.worldbooks.library.push(b); openWorldbook(b.id); }
        function renderWorldbookEditor(b) { document.getElementById('booksTitle').textContent = b.name; document.getElementById('booksContent').innerHTML = `<div class="menu-list"><div class="menu-item" onclick="systemData.worldbooks.currentId=null;saveSystemData();renderBooksApp();"><span><i class="menu-icon fas fa-arrow-left"></i>返回书库</span></div></div><div class="form-container" style="padding-top:0;"><div class="form-group"><label>描述</label><textarea oninput="saveBookProperty('${b.id}', 'description', this.value)">${b.description}</textarea></div></div><div class="menu-list" style="padding-top:0;"><div class="menu-item" onclick="renderEntryList('${b.id}', '角色')"><span>角色 (${(b.entries['角色']||[]).length})</span></div><div class="menu-item" onclick="renderEntryList('${b.id}', '地点')"><span>地点 (${(b.entries['地点']||[]).length})</span></div></div>`; }
        function saveBookProperty(bId, p, v) { const b = systemData.worldbooks.library.find(wb => wb.id === bId); if (b) { b[p] = v; saveSystemData(); } }
        function renderEntryList(bId, t) { const b = systemData.worldbooks.library.find(wb => wb.id === bId); if (!b) return; document.getElementById('booksTitle').textContent = t; const e = b.entries[t] || []; document.getElementById('booksContent').innerHTML = `<div class="menu-list"><div class="menu-item" onclick="renderWorldbookEditor(systemData.worldbooks.library.find(wb=>wb.id==='${bId}'))"><span><i class="menu-icon fas fa-arrow-left"></i>返回</span></div><div class="menu-item" onclick="addEntry('${bId}', '${t}')"><span><i class="menu-icon fas fa-plus"></i>添加新${t}</span></div>${e.map((en, i) => `<div class="menu-item" onclick="renderEntryEditor('${bId}', '${t}', ${i})"><span>${en.name}</span></div>`).join('')}</div>`; }
        function addEntry(bId, t) { const n = prompt(`请输入新的${t}名称:`); if (!n) return; const b = systemData.worldbooks.library.find(wb => wb.id === bId); if (!b.entries[t]) b.entries[t] = []; b.entries[t].push({ name: n, content: '' }); saveSystemData(); renderEntryList(bId, t); }
        function renderEntryEditor(bId, t, i) { const b = systemData.worldbooks.library.find(wb => wb.id === bId), e = b.entries[t][i]; document.getElementById('booksTitle').textContent = `编辑: ${e.name}`; document.getElementById('booksContent').innerHTML = `<div class="form-container"><div class="menu-item" onclick="renderEntryList('${bId}', '${t}')"><span><i class="menu-icon fas fa-arrow-left"></i>返回列表</span></div><div class="form-group"><label>名称</label><input type="text" value="${e.name}" oninput="saveEntryProperty('${bId}', '${t}', ${i}, 'name', this.value)"></div><div class="form-group"><label>内容</label><textarea oninput="saveEntryProperty('${bId}', '${t}', ${i}, 'content', this.value)">${e.content}</textarea></div><div class="form-actions"><button class="form-btn form-btn-secondary" onclick="deleteEntry('${bId}', '${t}', ${i})">删除</button></div></div>`; }
        function saveEntryProperty(bId, t, i, p, v) { const b = systemData.worldbooks.library.find(wb => wb.id === bId); if (b) { b.entries[t][i][p] = v; saveSystemData(); } }
        function deleteEntry(bId, t, i) { if (!confirm('确定删除？')) return; const b = systemData.worldbooks.library.find(wb => wb.id === bId); if (b) { b.entries[t].splice(i, 1); saveSystemData(); renderEntryList(bId, t); } }

        function renderDoubanApp() { const n = `<div class="nav-item" onclick="switchAppPage('douban', 'home')"><i class="fas fa-home"></i>首页</div><div class="nav-item" onclick="switchAppPage('douban', 'discover')"><i class="fas fa-search"></i>发现</div><div class="nav-item" onclick="switchAppPage('douban', 'me')"><i class="fas fa-user"></i>我</div>`; const p = { home: `<div id="douban-posts" class="menu-list">加载中...</div>`, discover: `<div class="form-container"><div class="form-group"><input type="search" id="douban-search-input" placeholder="搜索网页"><button onclick="searchWeb()">搜索</button></div></div>`, me: `<div class="form-container"><div class="menu-item" onclick="editProfile('douban', 'name')"><span>昵称</span><span>${systemData.douban.profile.name}</span></div></div>` }; renderAppWithPages('douban', '豆瓣', n, p, true, 'refreshDouban'); refreshDouban(); }
        async function refreshDouban() { try { const pc = document.getElementById('douban-posts'); pc.innerHTML = '刷新中...'; const c = await callAI("生成一条有趣的豆瓣动态，包含用户名和内容"); pc.innerHTML = `<div class="menu-item">${c}</div>` + pc.innerHTML; } catch(e) { document.getElementById('douban-posts').innerHTML = `<p class="status-message error">${e.message}</p>`; } }
        function searchWeb() { const q = document.getElementById('douban-search-input').value; if(q) window.open(`https://www.google.com/search?q=${encodeURIComponent(q)}`, '_blank'); }
        
        function renderDeliveryApp() { const n = `<div class="nav-item" onclick="switchAppPage('delivery', 'home')"><i class="fas fa-store"></i>首页</div><div class="nav-item" onclick="switchAppPage('delivery', 'orders')"><i class="fas fa-box"></i>订单</div><div class="nav-item" onclick="switchAppPage('delivery', 'me')"><i class="fas fa-user"></i>我</div>`; const p = { home: `<div class="food-list" id="delivery-food-list"></div>`, orders: `<div class="order-list" id="delivery-order-list"></div>`, me: `<div class="menu-list"><div class="menu-item" onclick="editProfile('delivery', 'name')"><span>昵称</span><span>${systemData.delivery.profile.name}</span></div><div class="menu-item" onclick="editProfile('delivery', 'address')"><span>地址</span><span>${systemData.delivery.profile.address || '未设置'}</span></div></div>` }; renderAppWithPages('delivery', '外卖', n, p, true, 'refreshDelivery'); refreshDelivery(); }
        async function refreshDelivery() { const fl = document.getElementById('delivery-food-list'); fl.innerHTML = '刷新中...'; try { const items = await callAI("生成4个外卖商品,格式为: 商品名1,价格1;商品名2,价格2;..."); const itemsHtml = items.split(';').map(item => { const [name, price] = item.split(','); return `<div class="food-item"><img src="https://via.placeholder.com/100?text=${name.substring(0,2)}"><div class="info"><div class="name">${name}</div><div class="price">¥${price}</div><button class="add-btn" onclick="addToCart('${name}', ${price})">+</button></div></div>`; }).join(''); fl.innerHTML = itemsHtml; } catch(e) { fl.innerHTML = `<p class="status-message error">${e.message}</p>`; } renderDeliveryOrders(); }
        function renderDeliveryOrders() { const ol = document.getElementById('delivery-order-list'); ol.innerHTML = systemData.delivery.orders.map(o => `<div class="order-item"><div class="header"><span>订单#${o.id}</span><span>${o.status}</span></div><div class="body">${o.items.map(i=>`<div>${i.name} x${i.quantity}</div>`).join('')}</div><div class="footer"><span>总计: ¥${o.total}</span></div><div class="actions">${o.status==='delivering' ? `<button onclick="confirmDelivery(${o.id})">确认送达</button>` : o.status==='delivered' ? `<button onclick="rateOrder(${o.id})">评价</button>`:''}</div></div>`).join(''); }
        function addToCart(name, price) { alert(`${name} 已加入购物车`); }
        function confirmDelivery(orderId) { const order = systemData.delivery.orders.find(o=>o.id===orderId); if(order) order.status='delivered'; saveSystemData(); renderDeliveryOrders(); }
        function rateOrder(orderId) { document.getElementById('ratingModal').style.display = 'flex'; window.currentRatingOrderId = orderId; }
        function submitRating() { const order = systemData.delivery.orders.find(o=>o.id===window.currentRatingOrderId); if(order) order.status='completed'; saveSystemData(); renderDeliveryOrders(); closeModal('ratingModal'); }
        function editProfile(app, field) { const newValue = prompt(`输入新的${field==='name'?'昵称':'地址'}:`, systemData[app].profile[field]); if(newValue !== null) { systemData[app].profile[field] = newValue; saveSystemData(); if(app==='delivery') renderDeliveryApp(); else if(app==='douban') renderDoubanApp(); } }
        function closeModal(id) { document.getElementById(id).style.display = 'none'; }
        
        function renderChatApp() { renderApp('chat', '聊天', '<p style="text-align:center; color:#888; padding-top: 50px;">聊天功能开发中...</p>'); }

        // --- 初始化 ---
        document.addEventListener('DOMContentLoaded', () => {
            loadSystemData();
            const appData = [
                { id: 'chat', name: '聊天', icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/IMessage_logo.svg/2048px-IMessage_logo.svg.png', renderFunc: renderChatApp },
                { id: 'douban', name: '豆瓣', icon: 'https://img.heliar.top/file/1761640211370_retouch_2025102816153556.png', renderFunc: renderDoubanApp },
                { id: 'delivery', name: '外卖', icon: 'https://tc.z.wiki/autoupload/f/_dUEGnKEJQzmc-cKlsXN5NiO_OyvX7mIgxFBfDMDErs/20251025/h86b/640X594/Image_1761364260149.png', renderFunc: renderDeliveryApp },
                { id: 'shopping', name: '购物', icon: 'https://img.heliar.top/file/1761641198173_Image_1761641161208.png', renderFunc: () => renderApp('shopping', '购物', '<p style="text-align:center; color:#888; padding-top: 50px;">购物功能开发中...</p>', true, '()=>alert("刷新购物")') },
                { id: 'books', name: '世界书', icon: 'https://tc.z.wiki/autoupload/f/_dUEGnKEJQzmc-cKlsXN5NiO_OyvX7mIgxFBfDMDErs/20251025/wdgd/643X630/Image_1761364259392.png', renderFunc: renderBooksApp },
                { id: 'settings', name: '设置', icon: 'https://img.heliar.top/file/1761641197219_Image_1761641166362.png', renderFunc: renderSettingsApp },
                { id: 'beautify', name: '美化', icon: 'https://tc.z.wiki/autoupload/f/_dUEGnKEJQzmc-cKlsXN5NiO_OyvX7mIgxFBfDMDErs/20251025/144c/1208X758/Image_1761364260710.png', renderFunc: () => renderApp('beautify', '美化', '<p style="text-align:center; color:#888; padding-top: 50px;">美化功能开发中...</p>') },
                { id: 'memo', name: '备忘录', icon: 'https://img.heliar.top/file/1761641197490_Image_1761641163726.png', renderFunc: () => renderApp('memo', '备忘录', '<p style="text-align:center; color:#888; padding-top: 50px;">备忘录功能开发中...</p>') },
            ];
            
            document.querySelector('.app-grid').innerHTML = appData.map(app => `<div class="app-icon-wrapper" onclick="openApp('${app.id}')"><div class="app-icon-image"><img src="${app.icon}" alt="${app.name}"></div><div class="app-icon-name">${app.name}</div></div>`).join('');
            appData.forEach(app => app.renderFunc());

            document.getElementById('lockScreen').classList.toggle('unlocked', systemData.unlocked);
            document.querySelector('.music-title').textContent = systemData.music.song;
            document.querySelector('.music-artist').textContent = systemData.music.artist;
            
            updateTime(); setInterval(updateTime, 1000);
            updateBattery(); navigator.getBattery().then(b => { b.onlevelchange = updateBattery; b.onchargingchange = updateBattery; });
            
            const lockScreen = document.getElementById('lockScreen');
            let startY;
            lockScreen.addEventListener('touchstart', e => startY = e.touches[0].clientY);
            lockScreen.addEventListener('touchend', e => { if (startY - e.changedTouches[0].clientY > 50) { lockScreen.classList.add('unlocked'); systemData.unlocked = true; saveSystemData(); } });
            
            document.getElementById('ratingStars').addEventListener('click', e => { if(e.target.classList.contains('star')) { const value = e.target.dataset.value; document.querySelectorAll('#ratingStars .star').forEach((s,i) => s.classList.toggle('active', i < value)); } });
        });
    </script>
</body>
</html>
